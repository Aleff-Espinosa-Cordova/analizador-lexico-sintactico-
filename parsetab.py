
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CicloF Condicional Contenido Declaracion_variable Definicion_funcion Dos_puntos ERROR Espacios IN Igual Igual_igual Mayor_o_igual Mayor_que Menor_o_igual Menor_que NUMBER Numero OPERADORES Parentesis_apertura Parentesis_final Punto_Y_coma Valor Variable\n    sentencia : variables\n                | ciclo_for\n                | funcion\n                | condicion_c\n    variables : Declaracion_variable Variable Igual Valor Punto_Y_comaciclo_for : CicloF Variable IN Variable Dos_puntos Parentesis_apertura Contenido Parentesis_final\n                    | CicloF Variable IN Valor Dos_puntos Parentesis_apertura Contenido Parentesis_finalfuncion : Definicion_funcion Variable Parentesis_apertura Variable Parentesis_final Dos_puntos\n                  | Definicion_funcion Variable Parentesis_apertura Parentesis_final Dos_puntoscondicion_c : Condicional Parentesis_apertura Variable OPERADORES Variable Parentesis_final Dos_puntos\n                     | Condicional Parentesis_apertura Variable OPERADORES Valor Parentesis_final Dos_puntos'
    
_lr_action_items = {'Declaracion_variable':([0,],[6,]),'CicloF':([0,],[7,]),'Definicion_funcion':([0,],[8,]),'Condicional':([0,],[9,]),'$end':([1,2,3,4,5,24,28,33,38,39,40,41,],[0,-1,-2,-3,-4,-5,-9,-8,-10,-11,-6,-7,]),'Variable':([6,7,8,13,15,16,23,],[10,11,12,17,19,21,29,]),'Parentesis_apertura':([9,12,25,26,],[13,16,31,32,]),'Igual':([10,],[14,]),'IN':([11,],[15,]),'Valor':([14,15,23,],[18,20,30,]),'Parentesis_final':([16,21,29,30,36,37,],[22,27,34,35,40,41,]),'OPERADORES':([17,],[23,]),'Punto_Y_coma':([18,],[24,]),'Dos_puntos':([19,20,22,27,34,35,],[25,26,28,33,38,39,]),'Contenido':([31,32,],[36,37,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'sentencia':([0,],[1,]),'variables':([0,],[2,]),'ciclo_for':([0,],[3,]),'funcion':([0,],[4,]),'condicion_c':([0,],[5,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> sentencia","S'",1,None,None,None),
  ('sentencia -> variables','sentencia',1,'p_sentencia','ana_sintac.py',7),
  ('sentencia -> ciclo_for','sentencia',1,'p_sentencia','ana_sintac.py',8),
  ('sentencia -> funcion','sentencia',1,'p_sentencia','ana_sintac.py',9),
  ('sentencia -> condicion_c','sentencia',1,'p_sentencia','ana_sintac.py',10),
  ('variables -> Declaracion_variable Variable Igual Valor Punto_Y_coma','variables',5,'p_variables','ana_sintac.py',15),
  ('ciclo_for -> CicloF Variable IN Variable Dos_puntos Parentesis_apertura Contenido Parentesis_final','ciclo_for',8,'p_ciclo_for','ana_sintac.py',19),
  ('ciclo_for -> CicloF Variable IN Valor Dos_puntos Parentesis_apertura Contenido Parentesis_final','ciclo_for',8,'p_ciclo_for','ana_sintac.py',20),
  ('funcion -> Definicion_funcion Variable Parentesis_apertura Variable Parentesis_final Dos_puntos','funcion',6,'p_funcion','ana_sintac.py',24),
  ('funcion -> Definicion_funcion Variable Parentesis_apertura Parentesis_final Dos_puntos','funcion',5,'p_funcion','ana_sintac.py',25),
  ('condicion_c -> Condicional Parentesis_apertura Variable OPERADORES Variable Parentesis_final Dos_puntos','condicion_c',7,'p_condicional','ana_sintac.py',29),
  ('condicion_c -> Condicional Parentesis_apertura Variable OPERADORES Valor Parentesis_final Dos_puntos','condicion_c',7,'p_condicional','ana_sintac.py',30),
]
